# Лабораторна робота 2. Створення складних SQL запитів

## Загальна інформація

**Здобувач освіти:** [Ваше ПІБ]
**Група:** [Номер групи]
**Обраний рівень складності:** [1/2/3]

## Виконання завдань

### Рівень 1

#### 1. З'єднання таблиць

**Завдання 1.1:** INNER JOIN - список товарів з категоріями та постачальниками

```sql
-- Вставте ваш SQL код тут

```

**Результат виконання:**
```
-- Вставте скріншот або текст результату (перші 10 рядків)

```

**Пояснення:** Опишіть, що робить цей запит та які таблиці з'єднуються.



**Завдання 1.2:** LEFT JOIN - клієнти з кількістю замовлень

```sql
-- Вставте ваш SQL код тут

```

**Результат виконання:**
```
-- Вставте результат

```

**Пояснення:** Поясніть різницю між INNER JOIN та LEFT JOIN на цьому прикладі.



**Завдання 1.3:** Множинне з'єднання - детальна інформація про замовлення

```sql
-- Вставте ваш SQL код тут (з'єднання 4-5 таблиць)

```

**Результат виконання:**
```
-- Вставте результат

```

**Аналіз складності:** Оцініть складність запиту та поясніть послідовність з'єднань.



#### 2. Агрегатні функції

**Завдання 2.1:** Статистика товарів за категоріями

```sql
-- COUNT, AVG, MIN, MAX по категоріях

```

**Результат виконання:**
```
-- Результат

```

**Завдання 2.2:** Продажі за регіонами з використанням HAVING

```sql
-- SUM, GROUP BY, HAVING

```

**Результат виконання:**
```
-- Результат

```

**Завдання 2.3:** Постачальники з кількістю товарів більше 2

```sql
-- Запит з HAVING

```

**Результат виконання:**
```
-- Результат

```



#### 3. Базові підзапити

**Завдання 3.1:** Товари з ціною вище середньої по категорії

```sql
-- Корельований підзапит

```

**Результат виконання:**
```
-- Результат

```

**Завдання 3.2:** Клієнти з замовленнями у 2024 році

```sql
-- Підзапит з IN

```

**Результат виконання:**
```
-- Результат

```

**Завдання 3.3:** Товари з загальною кількістю продажів

```sql
-- Підзапит у SELECT

```

**Результат виконання:**
```
-- Результат

```



### Рівень 2

#### 4. Складні з'єднання

**Завдання 4.1:** RIGHT JOIN - аналіз категорій та товарів

```sql
-- RIGHT JOIN код

```

**Результат виконання:**
```
-- Результат

```

**Завдання 4.2:** Self-join - співробітники та керівники

```sql
-- Self-join код

```

**Результат виконання:**
```
-- Результат

```



#### 5. Віконні функції

**Завдання 5.1:** Ранжування товарів за ціною в категоріях

```sql
-- RANK(), DENSE_RANK(), ROW_NUMBER() код

```

**Результат виконання:**
```
-- Результат

```

**Завдання 5.2:** Порівняння замовлень з попередніми датами

```sql
-- LAG(), LEAD() код

```

**Результат виконання:**
```
-- Результат

```



### Рівень 3

#### 6. Матеріалізовані представлення та рекурсивні запити

**Завдання 6.1:** Матеріалізоване представлення для аналізу продажів

```sql
-- CREATE MATERIALIZED VIEW код

```

**Пояснення:** Поясніть переваги використання матеріалізованих представлень.

**Завдання 6.2:** Рекурсивний запит для ієрархії співробітників

```sql
-- WITH RECURSIVE код

```

**Результат виконання:**
```
-- Результат

```



## Аналіз продуктивності

### Дослідження планів виконання

**Найповільніший запит:**
```sql
-- Код запиту

```

**План виконання (EXPLAIN ANALYZE):**
```
-- Результат EXPLAIN ANALYZE

```

**Запропоновані оптимізації:**
1. [Опис оптимізації 1]
2. [Опис оптимізації 2]
3. [Опис оптимізації 3]

### Створені індекси

**Індекс 1:**
```sql
-- CREATE INDEX код

```
**Обґрунтування:** [Пояснення чому цей індекс потрібен]

**Індекс 2:**
```sql
-- CREATE INDEX код

```
**Обґрунтування:** [Пояснення]



## Порівняльний аналіз

### Ефективність різних підходів

**Завдання:** Знайти топ-5 найдорожчих товарів у кожній категорії

**Підхід 1: Віконні функції**
```sql
-- Код з віконними функціями

```

**Підхід 2: Корельований підзапит**
```sql
-- Код з підзапитом

```

**Час виконання:**
- Віконні функції: [час]
- Корельований підзапит: [час]

**Висновок:** [Порівняння ефективності]



## Висновки

**Самооцінка**: [ваша оцінка роботи, 3-5]

**Обгрунтування**: [обґрунтування самооцінки]
